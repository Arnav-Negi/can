// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: can.proto

package protofiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CANNode_Join_FullMethodName                     = "/can.CANNode/Join"
	CANNode_Get_FullMethodName                      = "/can.CANNode/Get"
	CANNode_Put_FullMethodName                      = "/can.CANNode/Put"
	CANNode_AddNeighbor_FullMethodName              = "/can.CANNode/AddNeighbor"
	CANNode_Heartbeat_FullMethodName                = "/can.CANNode/Heartbeat"
	CANNode_SendNeighbourInfo_FullMethodName        = "/can.CANNode/SendNeighbourInfo"
	CANNode_InitiateLeave_FullMethodName            = "/can.CANNode/InitiateLeave"
	CANNode_PerformDFS_FullMethodName               = "/can.CANNode/PerformDFS"
	CANNode_TakeoverZone_FullMethodName             = "/can.CANNode/TakeoverZone"
	CANNode_TransferData_FullMethodName             = "/can.CANNode/TransferData"
	CANNode_GetNeighbors_FullMethodName             = "/can.CANNode/GetNeighbors"
	CANNode_NotifyZoneMerge_FullMethodName          = "/can.CANNode/NotifyZoneMerge"
	CANNode_ElectTakeoverCoordinator_FullMethodName = "/can.CANNode/ElectTakeoverCoordinator"
)

// CANNodeClient is the client API for CANNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the CAN Node Service
type CANNodeClient interface {
	// Join the CAN network
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	// Get a key in the CAN network
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Put a key-value pair in the CAN network
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// Add a neighbor to the routing table
	AddNeighbor(ctx context.Context, in *AddNeighborRequest, opts ...grpc.CallOption) (*AddNeighborResponse, error)
	// Send Heartbeat
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// Send neighbour and zone information
	SendNeighbourInfo(ctx context.Context, in *NeighbourInfoRequest, opts ...grpc.CallOption) (*NeighbourInfoResponse, error)
	// Start the leave process
	InitiateLeave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
	// Handle the DFS process
	PerformDFS(ctx context.Context, in *DFSRequest, opts ...grpc.CallOption) (*DFSResponse, error)
	// Handle the takeover process
	TakeoverZone(ctx context.Context, in *TakeoverRequest, opts ...grpc.CallOption) (*TakeoverResponse, error)
	TransferData(ctx context.Context, in *TransferDataRequest, opts ...grpc.CallOption) (*TransferDataResponse, error)
	GetNeighbors(ctx context.Context, in *GetNeighborsRequest, opts ...grpc.CallOption) (*GetNeighborsResponse, error)
	NotifyZoneMerge(ctx context.Context, in *ZoneMergeNotification, opts ...grpc.CallOption) (*ZoneMergeResponse, error)
	ElectTakeoverCoordinator(ctx context.Context, in *CoordinatorElectionRequest, opts ...grpc.CallOption) (*CoordinatorElectionResponse, error)
}

type cANNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewCANNodeClient(cc grpc.ClientConnInterface) CANNodeClient {
	return &cANNodeClient{cc}
}

func (c *cANNodeClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, CANNode_Join_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cANNodeClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, CANNode_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cANNodeClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, CANNode_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cANNodeClient) AddNeighbor(ctx context.Context, in *AddNeighborRequest, opts ...grpc.CallOption) (*AddNeighborResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddNeighborResponse)
	err := c.cc.Invoke(ctx, CANNode_AddNeighbor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cANNodeClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, CANNode_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cANNodeClient) SendNeighbourInfo(ctx context.Context, in *NeighbourInfoRequest, opts ...grpc.CallOption) (*NeighbourInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NeighbourInfoResponse)
	err := c.cc.Invoke(ctx, CANNode_SendNeighbourInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cANNodeClient) InitiateLeave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveResponse)
	err := c.cc.Invoke(ctx, CANNode_InitiateLeave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cANNodeClient) PerformDFS(ctx context.Context, in *DFSRequest, opts ...grpc.CallOption) (*DFSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DFSResponse)
	err := c.cc.Invoke(ctx, CANNode_PerformDFS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cANNodeClient) TakeoverZone(ctx context.Context, in *TakeoverRequest, opts ...grpc.CallOption) (*TakeoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TakeoverResponse)
	err := c.cc.Invoke(ctx, CANNode_TakeoverZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cANNodeClient) TransferData(ctx context.Context, in *TransferDataRequest, opts ...grpc.CallOption) (*TransferDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferDataResponse)
	err := c.cc.Invoke(ctx, CANNode_TransferData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cANNodeClient) GetNeighbors(ctx context.Context, in *GetNeighborsRequest, opts ...grpc.CallOption) (*GetNeighborsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNeighborsResponse)
	err := c.cc.Invoke(ctx, CANNode_GetNeighbors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cANNodeClient) NotifyZoneMerge(ctx context.Context, in *ZoneMergeNotification, opts ...grpc.CallOption) (*ZoneMergeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ZoneMergeResponse)
	err := c.cc.Invoke(ctx, CANNode_NotifyZoneMerge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cANNodeClient) ElectTakeoverCoordinator(ctx context.Context, in *CoordinatorElectionRequest, opts ...grpc.CallOption) (*CoordinatorElectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoordinatorElectionResponse)
	err := c.cc.Invoke(ctx, CANNode_ElectTakeoverCoordinator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CANNodeServer is the server API for CANNode service.
// All implementations must embed UnimplementedCANNodeServer
// for forward compatibility.
//
// Define the CAN Node Service
type CANNodeServer interface {
	// Join the CAN network
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	// Get a key in the CAN network
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Put a key-value pair in the CAN network
	Put(context.Context, *PutRequest) (*PutResponse, error)
	// Add a neighbor to the routing table
	AddNeighbor(context.Context, *AddNeighborRequest) (*AddNeighborResponse, error)
	// Send Heartbeat
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// Send neighbour and zone information
	SendNeighbourInfo(context.Context, *NeighbourInfoRequest) (*NeighbourInfoResponse, error)
	// Start the leave process
	InitiateLeave(context.Context, *LeaveRequest) (*LeaveResponse, error)
	// Handle the DFS process
	PerformDFS(context.Context, *DFSRequest) (*DFSResponse, error)
	// Handle the takeover process
	TakeoverZone(context.Context, *TakeoverRequest) (*TakeoverResponse, error)
	TransferData(context.Context, *TransferDataRequest) (*TransferDataResponse, error)
	GetNeighbors(context.Context, *GetNeighborsRequest) (*GetNeighborsResponse, error)
	NotifyZoneMerge(context.Context, *ZoneMergeNotification) (*ZoneMergeResponse, error)
	ElectTakeoverCoordinator(context.Context, *CoordinatorElectionRequest) (*CoordinatorElectionResponse, error)
	mustEmbedUnimplementedCANNodeServer()
}

// UnimplementedCANNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCANNodeServer struct{}

func (UnimplementedCANNodeServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedCANNodeServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCANNodeServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedCANNodeServer) AddNeighbor(context.Context, *AddNeighborRequest) (*AddNeighborResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNeighbor not implemented")
}
func (UnimplementedCANNodeServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedCANNodeServer) SendNeighbourInfo(context.Context, *NeighbourInfoRequest) (*NeighbourInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNeighbourInfo not implemented")
}
func (UnimplementedCANNodeServer) InitiateLeave(context.Context, *LeaveRequest) (*LeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateLeave not implemented")
}
func (UnimplementedCANNodeServer) PerformDFS(context.Context, *DFSRequest) (*DFSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformDFS not implemented")
}
func (UnimplementedCANNodeServer) TakeoverZone(context.Context, *TakeoverRequest) (*TakeoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeoverZone not implemented")
}
func (UnimplementedCANNodeServer) TransferData(context.Context, *TransferDataRequest) (*TransferDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferData not implemented")
}
func (UnimplementedCANNodeServer) GetNeighbors(context.Context, *GetNeighborsRequest) (*GetNeighborsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNeighbors not implemented")
}
func (UnimplementedCANNodeServer) NotifyZoneMerge(context.Context, *ZoneMergeNotification) (*ZoneMergeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyZoneMerge not implemented")
}
func (UnimplementedCANNodeServer) ElectTakeoverCoordinator(context.Context, *CoordinatorElectionRequest) (*CoordinatorElectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ElectTakeoverCoordinator not implemented")
}
func (UnimplementedCANNodeServer) mustEmbedUnimplementedCANNodeServer() {}
func (UnimplementedCANNodeServer) testEmbeddedByValue()                 {}

// UnsafeCANNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CANNodeServer will
// result in compilation errors.
type UnsafeCANNodeServer interface {
	mustEmbedUnimplementedCANNodeServer()
}

func RegisterCANNodeServer(s grpc.ServiceRegistrar, srv CANNodeServer) {
	// If the following call pancis, it indicates UnimplementedCANNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CANNode_ServiceDesc, srv)
}

func _CANNode_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CANNodeServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CANNode_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CANNodeServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CANNode_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CANNodeServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CANNode_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CANNodeServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CANNode_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CANNodeServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CANNode_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CANNodeServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CANNode_AddNeighbor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNeighborRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CANNodeServer).AddNeighbor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CANNode_AddNeighbor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CANNodeServer).AddNeighbor(ctx, req.(*AddNeighborRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CANNode_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CANNodeServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CANNode_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CANNodeServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CANNode_SendNeighbourInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NeighbourInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CANNodeServer).SendNeighbourInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CANNode_SendNeighbourInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CANNodeServer).SendNeighbourInfo(ctx, req.(*NeighbourInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CANNode_InitiateLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CANNodeServer).InitiateLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CANNode_InitiateLeave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CANNodeServer).InitiateLeave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CANNode_PerformDFS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DFSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CANNodeServer).PerformDFS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CANNode_PerformDFS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CANNodeServer).PerformDFS(ctx, req.(*DFSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CANNode_TakeoverZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CANNodeServer).TakeoverZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CANNode_TakeoverZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CANNodeServer).TakeoverZone(ctx, req.(*TakeoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CANNode_TransferData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CANNodeServer).TransferData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CANNode_TransferData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CANNodeServer).TransferData(ctx, req.(*TransferDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CANNode_GetNeighbors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNeighborsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CANNodeServer).GetNeighbors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CANNode_GetNeighbors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CANNodeServer).GetNeighbors(ctx, req.(*GetNeighborsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CANNode_NotifyZoneMerge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneMergeNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CANNodeServer).NotifyZoneMerge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CANNode_NotifyZoneMerge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CANNodeServer).NotifyZoneMerge(ctx, req.(*ZoneMergeNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _CANNode_ElectTakeoverCoordinator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoordinatorElectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CANNodeServer).ElectTakeoverCoordinator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CANNode_ElectTakeoverCoordinator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CANNodeServer).ElectTakeoverCoordinator(ctx, req.(*CoordinatorElectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CANNode_ServiceDesc is the grpc.ServiceDesc for CANNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CANNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "can.CANNode",
	HandlerType: (*CANNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _CANNode_Join_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CANNode_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _CANNode_Put_Handler,
		},
		{
			MethodName: "AddNeighbor",
			Handler:    _CANNode_AddNeighbor_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _CANNode_Heartbeat_Handler,
		},
		{
			MethodName: "SendNeighbourInfo",
			Handler:    _CANNode_SendNeighbourInfo_Handler,
		},
		{
			MethodName: "InitiateLeave",
			Handler:    _CANNode_InitiateLeave_Handler,
		},
		{
			MethodName: "PerformDFS",
			Handler:    _CANNode_PerformDFS_Handler,
		},
		{
			MethodName: "TakeoverZone",
			Handler:    _CANNode_TakeoverZone_Handler,
		},
		{
			MethodName: "TransferData",
			Handler:    _CANNode_TransferData_Handler,
		},
		{
			MethodName: "GetNeighbors",
			Handler:    _CANNode_GetNeighbors_Handler,
		},
		{
			MethodName: "NotifyZoneMerge",
			Handler:    _CANNode_NotifyZoneMerge_Handler,
		},
		{
			MethodName: "ElectTakeoverCoordinator",
			Handler:    _CANNode_ElectTakeoverCoordinator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "can.proto",
}
