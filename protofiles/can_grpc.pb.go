// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: can.proto

package protofiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CANNode_Join_FullMethodName        = "/can.CANNode/Join"
	CANNode_Get_FullMethodName         = "/can.CANNode/Get"
	CANNode_Put_FullMethodName         = "/can.CANNode/Put"
	CANNode_AddNeighbor_FullMethodName = "/can.CANNode/AddNeighbor"
)

// CANNodeClient is the client API for CANNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the CAN Node Service
type CANNodeClient interface {
	// Join the CAN network
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	// Get a key in the CAN network
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Put a key-value pair in the CAN network
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// Add a neighbor to the routing table
	AddNeighbor(ctx context.Context, in *AddNeighborRequest, opts ...grpc.CallOption) (*AddNeighborResponse, error)
}

type cANNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewCANNodeClient(cc grpc.ClientConnInterface) CANNodeClient {
	return &cANNodeClient{cc}
}

func (c *cANNodeClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, CANNode_Join_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cANNodeClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, CANNode_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cANNodeClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, CANNode_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cANNodeClient) AddNeighbor(ctx context.Context, in *AddNeighborRequest, opts ...grpc.CallOption) (*AddNeighborResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddNeighborResponse)
	err := c.cc.Invoke(ctx, CANNode_AddNeighbor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CANNodeServer is the server API for CANNode service.
// All implementations must embed UnimplementedCANNodeServer
// for forward compatibility.
//
// Define the CAN Node Service
type CANNodeServer interface {
	// Join the CAN network
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	// Get a key in the CAN network
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Put a key-value pair in the CAN network
	Put(context.Context, *PutRequest) (*PutResponse, error)
	// Add a neighbor to the routing table
	AddNeighbor(context.Context, *AddNeighborRequest) (*AddNeighborResponse, error)
	mustEmbedUnimplementedCANNodeServer()
}

// UnimplementedCANNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCANNodeServer struct{}

func (UnimplementedCANNodeServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedCANNodeServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCANNodeServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedCANNodeServer) AddNeighbor(context.Context, *AddNeighborRequest) (*AddNeighborResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNeighbor not implemented")
}
func (UnimplementedCANNodeServer) mustEmbedUnimplementedCANNodeServer() {}
func (UnimplementedCANNodeServer) testEmbeddedByValue()                 {}

// UnsafeCANNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CANNodeServer will
// result in compilation errors.
type UnsafeCANNodeServer interface {
	mustEmbedUnimplementedCANNodeServer()
}

func RegisterCANNodeServer(s grpc.ServiceRegistrar, srv CANNodeServer) {
	// If the following call pancis, it indicates UnimplementedCANNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CANNode_ServiceDesc, srv)
}

func _CANNode_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CANNodeServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CANNode_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CANNodeServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CANNode_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CANNodeServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CANNode_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CANNodeServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CANNode_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CANNodeServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CANNode_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CANNodeServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CANNode_AddNeighbor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNeighborRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CANNodeServer).AddNeighbor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CANNode_AddNeighbor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CANNodeServer).AddNeighbor(ctx, req.(*AddNeighborRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CANNode_ServiceDesc is the grpc.ServiceDesc for CANNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CANNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "can.CANNode",
	HandlerType: (*CANNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _CANNode_Join_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CANNode_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _CANNode_Put_Handler,
		},
		{
			MethodName: "AddNeighbor",
			Handler:    _CANNode_AddNeighbor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "can.proto",
}
