// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: bootstrap.proto

package protofiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BootstrapService_JoinInfo_FullMethodName     = "/can.BootstrapService/JoinInfo"
	BootstrapService_GetRootCApem_FullMethodName = "/can.BootstrapService/GetRootCApem"
	BootstrapService_SignCSR_FullMethodName      = "/can.BootstrapService/SignCSR"
)

// BootstrapServiceClient is the client API for BootstrapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BootstrapService provides the ability to discover nodes in the network
type BootstrapServiceClient interface {
	// JoinInfo returns a list of active nodes in the network
	JoinInfo(ctx context.Context, in *JoinInfoRequest, opts ...grpc.CallOption) (*JoinInfoResponse, error)
	// GetRootCApem returns the root CA certificate
	GetRootCApem(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RootCApemResponse, error)
	// SignCSR signs a Certificate Signing Request (CSR) and returns the signed certificate
	SignCSR(ctx context.Context, in *SignCSRRequest, opts ...grpc.CallOption) (*SignCSRResponse, error)
}

type bootstrapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBootstrapServiceClient(cc grpc.ClientConnInterface) BootstrapServiceClient {
	return &bootstrapServiceClient{cc}
}

func (c *bootstrapServiceClient) JoinInfo(ctx context.Context, in *JoinInfoRequest, opts ...grpc.CallOption) (*JoinInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinInfoResponse)
	err := c.cc.Invoke(ctx, BootstrapService_JoinInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapServiceClient) GetRootCApem(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RootCApemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RootCApemResponse)
	err := c.cc.Invoke(ctx, BootstrapService_GetRootCApem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapServiceClient) SignCSR(ctx context.Context, in *SignCSRRequest, opts ...grpc.CallOption) (*SignCSRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignCSRResponse)
	err := c.cc.Invoke(ctx, BootstrapService_SignCSR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BootstrapServiceServer is the server API for BootstrapService service.
// All implementations must embed UnimplementedBootstrapServiceServer
// for forward compatibility.
//
// BootstrapService provides the ability to discover nodes in the network
type BootstrapServiceServer interface {
	// JoinInfo returns a list of active nodes in the network
	JoinInfo(context.Context, *JoinInfoRequest) (*JoinInfoResponse, error)
	// GetRootCApem returns the root CA certificate
	GetRootCApem(context.Context, *emptypb.Empty) (*RootCApemResponse, error)
	// SignCSR signs a Certificate Signing Request (CSR) and returns the signed certificate
	SignCSR(context.Context, *SignCSRRequest) (*SignCSRResponse, error)
	mustEmbedUnimplementedBootstrapServiceServer()
}

// UnimplementedBootstrapServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBootstrapServiceServer struct{}

func (UnimplementedBootstrapServiceServer) JoinInfo(context.Context, *JoinInfoRequest) (*JoinInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinInfo not implemented")
}
func (UnimplementedBootstrapServiceServer) GetRootCApem(context.Context, *emptypb.Empty) (*RootCApemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootCApem not implemented")
}
func (UnimplementedBootstrapServiceServer) SignCSR(context.Context, *SignCSRRequest) (*SignCSRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignCSR not implemented")
}
func (UnimplementedBootstrapServiceServer) mustEmbedUnimplementedBootstrapServiceServer() {}
func (UnimplementedBootstrapServiceServer) testEmbeddedByValue()                          {}

// UnsafeBootstrapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BootstrapServiceServer will
// result in compilation errors.
type UnsafeBootstrapServiceServer interface {
	mustEmbedUnimplementedBootstrapServiceServer()
}

func RegisterBootstrapServiceServer(s grpc.ServiceRegistrar, srv BootstrapServiceServer) {
	// If the following call pancis, it indicates UnimplementedBootstrapServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BootstrapService_ServiceDesc, srv)
}

func _BootstrapService_JoinInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServiceServer).JoinInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapService_JoinInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServiceServer).JoinInfo(ctx, req.(*JoinInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootstrapService_GetRootCApem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServiceServer).GetRootCApem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapService_GetRootCApem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServiceServer).GetRootCApem(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootstrapService_SignCSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignCSRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServiceServer).SignCSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapService_SignCSR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServiceServer).SignCSR(ctx, req.(*SignCSRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BootstrapService_ServiceDesc is the grpc.ServiceDesc for BootstrapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BootstrapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "can.BootstrapService",
	HandlerType: (*BootstrapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinInfo",
			Handler:    _BootstrapService_JoinInfo_Handler,
		},
		{
			MethodName: "GetRootCApem",
			Handler:    _BootstrapService_GetRootCApem_Handler,
		},
		{
			MethodName: "SignCSR",
			Handler:    _BootstrapService_SignCSR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bootstrap.proto",
}
