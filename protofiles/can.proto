syntax = "proto3";

package can;

option go_package = "./protofiles";

// Define the CAN Node Service
service CANNode {
  // Join the CAN network
  rpc Join(JoinRequest) returns (JoinResponse);

  // Get a key in the CAN network
  rpc Get(GetRequest) returns (GetResponse);

  // Put a key-value pair in the CAN network
  rpc Put(PutRequest) returns (PutResponse);

  // Delete a key-value pair in the CAN network
  rpc Delete(DeleteRequest) returns (DeleteResponse);

  // Add a neighbor to the routing table
  rpc AddNeighbor(AddNeighborRequest) returns (AddNeighborResponse);

  // Send Heartbeat
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);

  // Send neighbour and zone information
  rpc SendNeighbourInfo(NeighbourInfoRequest) returns (NeighbourInfoResponse);

  // Start the leave process
  rpc InitiateLeave(LeaveRequest) returns (LeaveResponse);

  // Handle the DFS process
  rpc PerformDFS(DFSRequest) returns (DFSResponse);

  // Handle the takeover process
  rpc TakeoverZone(TakeoverRequest) returns (TakeoverResponse);
  rpc TransferData(TransferDataRequest) returns (TransferDataResponse);
  rpc GetNeighbors(GetNeighborsRequest) returns (GetNeighborsResponse);
  rpc NotifyZoneMerge(ZoneMergeNotification) returns (ZoneMergeResponse);
  rpc ElectTakeoverCoordinator(CoordinatorElectionRequest) returns (CoordinatorElectionResponse);

}


// meta types Zone, Node and KeyValuePair
message Zone {
  repeated float minCoordinates = 1; // coordinates of the zone (d)
  repeated float maxCoordinates = 2; // coordinates of the zone (d)
}
message Node {
  string node_id = 1; // Unique identifier for the node
  string address = 2; // IP:Port of the node
  Zone zone = 3;      // The zone assigned to the node
}
message KeyValuePair {
  string key = 1;
  bytes value = 2;
}

// Request for joining the CAN network
message JoinRequest {
  // coordinates of the zone to be split - should be exactly d floats
  repeated float coordinates = 1;
  string node_id = 2; // Unique identifier for the node
  string address = 3; // IP:Port of the node
}

message JoinResponse {
  Zone assigned_zone = 1; // The zone assigned to the node
  repeated Node neighbors = 2; // List of neighboring nodes
  repeated KeyValuePair transferred_data = 3; // Key-value pairs for the assigned zone
}

// Request for looking up a key
message GetRequest {
  string key = 1;
  int32 hash_to_use = 2;
}
message GetResponse {
  bytes value = 1;
}

// Request for storing a key-value pair
message PutRequest {
  string key = 1;
  bytes value = 2;
  int32 hash_to_use = 3; // Hash function to use for the key
}

message PutResponse {
  bool success = 1; // Whether the key-value pair was stored successfully
}

// Request for deleting a key-value pair
message DeleteRequest {
  string key = 1;
  int32 hash_to_use = 2; // Hash function to use for the key
}
message DeleteResponse {
  bool success = 1; // Whether the key-value pair was deleted successfully
}

// Request for adding a neighbor
message AddNeighborRequest {
  Node neighbor = 1; // The node to add as a neighbor
}

message AddNeighborResponse {
  bool success = 1; // Whether the neighbor was added successfully
}

// Request for sending a heartbeat
message HeartbeatRequest {
  string address = 1; // IP:Port of the node
}
message HeartbeatResponse {
  bool success = 1; // Whether the heartbeat was acknowledged
}

// Request for sending neighbor and zone information
message NeighbourInfoRequest {
  string node_id = 1;           // Unique identifier for the node
  Zone zone = 2;                // The zone assigned to the node
  repeated Node neighbours = 3; // List of neighboring nodes
  repeated Zone zones = 4;      // List of neighbor zones
}
message NeighbourInfoResponse {
  bool success = 1; // Whether the neighbor information was sent successfully
}

// New message types
message LeaveRequest {
  string leaving_node_id = 1;
  Zone leaving_zone = 2;
}

message LeaveResponse {
  bool success = 1;
  string error_message = 2;
}

message DFSRequest {
  string leaving_node_id = 1;
  Zone parent_zone = 2;
  string parent_node_id = 3;
}

message DFSResponse {
  bool found_sibling = 1;
  string takeover_node_id = 2;
  string takeover_address = 3;
  Zone takeover_zone = 4;
}

message TakeoverRequest {
  string leaving_node_id = 1;
  string leaving_node_address = 2;
  Zone leaving_zone = 3;
  bool is_graceful = 4;  // Whether this is a graceful leave or a crash
}

message TakeoverResponse {
  bool success = 1;
  string error_message = 2;
}

message TransferDataRequest {
  string requesting_node_id = 1;
}

message TransferDataResponse {
  repeated KeyValuePair data = 1;
}

message GetNeighborsRequest {
  // Empty request
}

message GetNeighborsResponse {
  repeated Node neighbors = 1;
}

message ZoneMergeNotification {
  string takeover_node_id = 1;
  Zone old_zone = 2;
  Zone new_zone = 3;
  string leaving_node_id = 4;
}

message ZoneMergeResponse {
  bool success = 1;
}

message CoordinatorElectionRequest {
  string candidate_node_id = 1;
  float candidate_volume = 2;
  string crashed_node_id = 3;
}

message CoordinatorElectionResponse {
  bool should_be_coordinator = 1;
}